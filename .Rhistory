?weighted_glm
?weighted_glm
?weighted_glm.R
??weighted_glm
usethis::use_package("stats")
usethis::use_mit_license()
install.packages("/Users/lusihan/Desktop/GLMplus_0.0.0.9000.tar.gz", repos = NULL, type="source")
install.packages("/Users/lusihan/Desktop/GLMplus_0.0.0.9000.tar.gz", repos = NULL, type="source")
install.packages("/Users/lusihan/Desktop/GLMplus_0.0.0.9000.tar.gz", repos = NULL, type="source")
# 使用我们的R包示例1--Weighted GLM
library(GLMplus)
# 定义真实参数
y = c(1,3,3,5,6,7,9,10)
x = c(-1,-1,0,0,0,0,1,1)
w <- c(0.4, 0.8, 0.9, 1.2, 1.1, 0.7, 0.9, 0.8)
result <- weighted_glm(x,y,w)
print(result$m)
print(result$b)
# 使用我们的R包示例1--Weighted GLM
library(GLMplus)
# 定义数据
y = c(1,3,3,5,6,7,9,10)
x = c(-1,-1,0,0,0,0,1,1)
w <- c(0.4, 0.8, 0.9, 1.2, 1.1, 0.7, 0.9, 0.8)
result <- weighted_glm(x,y,w)
print(result$m)
print(result$b)
# 使用我们的R包示例2--Double GLM
# library(GLMplus)
# 定义真实参数
beta <- c(2.5, 0.8, 0.2, 0.15)
gamma <- c(-1.2,0.3,0.7)
n=1000
result <- est_dglm(gamma,beta,n)
print(result$params1)
print(result$params2)
# 导入数据集
library(CASdatasets)
library(zoo)
library(xts)
# 加载 freMTPL2freq 数据集
data("freMTPL2freq", package = "CASdatasets")
data("freMTPL2sev", package = "CASdatasets")
# 查看数据集的前几行并赋值
head(freMTPL2freq)
head(freMTPL2sev)
freq <- read.csv('/Users/lusihan/Desktop/risk_final/freMTPL2freq.csv')
sev_agg <- read.csv('/Users/lusihan/Desktop/risk_final/sev_add.csv')
dat <- merge(x=freq[,-2], y=sev_agg, by="IDpol", all.x=TRUE)
dat[is.na(dat)] <- 0
# 数据预处理 Schelldorfer and Wüthrich (2019)
dat$ClaimNb  <- pmin(dat$ClaimNb,4)
dat$Exposure <- pmin(dat$Exposure,1)
dat$DrivAge  <- pmin(dat$DrivAge,90)
dat$VehAge  <- pmin(dat$VehAge,40)
summary(dat)
# Feature preprocessing for GLM
dat1 <- dat
dat1$VehPowerGLM <- as.factor(pmin(dat1$VehPower,9))
VehAgeGLM <- cbind(c(0:110), c(1, rep(2,10), rep(3,100)))
dat1$VehAgeGLM <- as.factor(VehAgeGLM[dat1$VehAge+1,2])
dat1[,"VehAgeGLM"] <-relevel(dat1[,"VehAgeGLM"], ref="2")
DrivAgeGLM <- cbind(c(18:100), c(rep(1,21-18), rep(2,26-21), rep(3,31-26), rep(4,41-31), rep(5,51-41), rep(6,71-51), rep(7,101-71)))
dat1$DrivAgeGLM <- as.factor(DrivAgeGLM[dat1$DrivAge-17,2])
dat1[,"DrivAgeGLM"] <- relevel(dat1[,"DrivAgeGLM"], ref="5")
dat1$BonusMalusGLM <- as.integer(pmin(dat1$BonusMalus, 150))
dat1$DensityGLM <- as.numeric(log(dat1$Density))
head(dat1)
# Modified function PDX: Weighted Poisson Deviance
PDW <- function(pred, obs, ex = rep(1, length(obs))) {
200 * sum( ex * ( pred - obs  + log((obs / pred) ^ (obs )))) / sum(ex)
}
# Function PD2: Print Poisson Deviance learn/test
PDW2 <- function(txt, l.c, l.x, l.e, t.c, t.x, t.e) {
sprintf("%s, Learn/Test: %.2f%% / %.2f%%", txt, PDW(l.c, l.x, l.e), PDW(t.c, t.x, t.e))
}
# Function CF2: Print claim frequency
CF2 <- function(txt, l.c, l.x, t.c, t.x) {
sprintf("%s: %.2f%% / %.2f%%", txt, sum(l.c)/sum(l.x)*100, sum(t.c)/sum(t.x)*100)
}
# Benchmark.GLM2
Benchmark.GLM2 <- function(txt, pred) {
index <- ((PDW(pred, test$ClaimNb, test$Exposure) - PDW(test$fit.cf, test$ClaimNb, test$Exposure)) / (PDW(test$fitGLM2, test$ClaimNb, test$Exposure) - PDW(test$fit.cf, test$ClaimNb, test$Exposure))) * 100
sprintf("GLM2-Improvement-Index (PD test) of %s: %.1f%%", txt, index)
}
# 设置训练集与测试集
k <- 5
set.seed(42)
fold <- sample(1:k, nrow(dat1), replace = TRUE)
dat1$fold <- fold
learn <- dat1[dat1$fold != 5,]    # 80%
test <- dat1[ dat1$fold == 5,]    # 20%
CF2("索赔频率-训练集/测试集", learn$ClaimNb,learn$Exposure, test$ClaimNb,test$Exposure)
# GLM1--假设是用我们的包做的
f.glm1 <- ClaimNb ~ VehPowerGLM + VehAgeGLM + DrivAgeGLM + BonusMalusGLM + VehBrand + VehGas + DensityGLM + Region + Area
d.glm1 <- glm(f.glm1, data = learn, offset = log(Exposure), family = poisson())
summary(d.glm1)
learn$fitGLM1 <- fitted(d.glm1)
test$fitGLM1 <- predict(d.glm1, newdata=test, type="response")
# Print claim frequency actual vs predicted
CF2("Claim Frequency GLM1, Test-Sample, Actual/Predicted", test$ClaimNb,test$Exposure, test$fitGLM1,test$Exposure)
# Print Poisson Deviance
PDW2("Poisson Deviance GLM1", learn$fitGLM1,learn$ClaimNb,learn$Exposure, test$fitGLM1,test$ClaimNb,test$Exposure)
# GLM1--假设是用我们的包做的
f.glm1 <- ClaimNb ~ VehPowerGLM + VehAgeGLM + DrivAgeGLM + BonusMalusGLM + VehBrand + VehGas + DensityGLM + Region + Area
d.glm1 <- glm(f.glm1, data = learn, offset = log(Exposure), family = poisson())
summary(d.glm1)
learn$fitGLM1 <- fitted(d.glm1)
test$fitGLM1 <- predict(d.glm1, newdata=test, type="response")
# Print claim frequency actual vs predicted
sprintf("%s: %.2f%% / %.2f%%", "Claim Frequency GLM1, Test-Sample, Actual/Predicted", sum(test$ClaimNb)/sum(test$Exposure)*100, sum(test$fitGLM1)/sum(test$Exposure)*100)
# Print Poisson Deviance
sprintf("%s, Learn/Test: %.2f%% / %.2f%%", "Poisson Deviance GLM1", PDW(learn$fitGLM1,learn$ClaimNb,learn$Exposure), PDW(test$fitGLM1,test$ClaimNb,test$Exposure))
# 导入数据集
library(CASdatasets)
library(zoo)
library(xts)
# 加载 freMTPL2freq 数据集
data("freMTPL2freq", package = "CASdatasets")
data("freMTPL2sev", package = "CASdatasets")
# 查看数据集的前几行并赋值
head(freMTPL2freq)
head(freMTPL2sev)
freq <- read.csv('/Users/lusihan/Desktop/risk_final/freMTPL2freq.csv')
sev_agg <- read.csv('/Users/lusihan/Desktop/risk_final/sev_add.csv')
dat <- merge(x=freq[,-2], y=sev_agg, by="IDpol", all.x=TRUE)
dat[is.na(dat)] <- 0
# 数据预处理 Schelldorfer and Wüthrich (2019)
dat$ClaimNb  <- pmin(dat$ClaimNb,4)
dat$Exposure <- pmin(dat$Exposure,1)
dat$DrivAge  <- pmin(dat$DrivAge,90)
dat$VehAge  <- pmin(dat$VehAge,40)
summary(dat)
# Feature preprocessing for GLM
dat1 <- dat
dat1$VehPowerGLM <- as.factor(pmin(dat1$VehPower,9))
VehAgeGLM <- cbind(c(0:110), c(1, rep(2,10), rep(3,100)))
dat1$VehAgeGLM <- as.factor(VehAgeGLM[dat1$VehAge+1,2])
dat1[,"VehAgeGLM"] <-relevel(dat1[,"VehAgeGLM"], ref="2")
DrivAgeGLM <- cbind(c(18:100), c(rep(1,21-18), rep(2,26-21), rep(3,31-26), rep(4,41-31), rep(5,51-41), rep(6,71-51), rep(7,101-71)))
dat1$DrivAgeGLM <- as.factor(DrivAgeGLM[dat1$DrivAge-17,2])
dat1[,"DrivAgeGLM"] <- relevel(dat1[,"DrivAgeGLM"], ref="5")
dat1$BonusMalusGLM <- as.integer(pmin(dat1$BonusMalus, 150))
dat1$DensityGLM <- as.numeric(log(dat1$Density))
head(dat1)
# 设置训练集与测试集
k <- 5
set.seed(42)
fold <- sample(1:k, nrow(dat1), replace = TRUE)
dat1$fold <- fold
learn <- dat1[dat1$fold != 5,]    # 80%
test <- dat1[ dat1$fold == 5,]    # 20%
CF2("索赔频率-训练集/测试集", learn$ClaimNb,learn$Exposure, test$ClaimNb,test$Exposure)
# 设置训练集与测试集
k <- 5
set.seed(42)
fold <- sample(1:k, nrow(dat1), replace = TRUE)
dat1$fold <- fold
learn <- dat1[dat1$fold != 5,]    # 80%
test <- dat1[ dat1$fold == 5,]    # 20%
sprintf("索赔频率-训练集/测试集", sum(learn$ClaimNb)/sum(learn$Exposure)*100, sum(test$ClaimNb)/sum(test$Exposure)*100)
# 设置训练集与测试集
k <- 5
set.seed(42)
fold <- sample(1:k, nrow(dat1), replace = TRUE)
dat1$fold <- fold
learn <- dat1[dat1$fold != 5,]    # 80%
test <- dat1[ dat1$fold == 5,]    # 20%
sprintf("%s, Learn/Test: %.2f%% / %.2f%%","索赔频率-训练集/测试集", sum(learn$ClaimNb)/sum(learn$Exposure)*100, sum(test$ClaimNb)/sum(test$Exposure)*100)
# GLM1--假设是用我们的包做的
f.glm1 <- ClaimNb ~ VehPowerGLM + VehAgeGLM + DrivAgeGLM + BonusMalusGLM + VehBrand + VehGas + DensityGLM + Region + Area
d.glm1 <- glm(f.glm1, data = learn, offset = log(Exposure), family = poisson())
summary(d.glm1)
learn$fitGLM1 <- fitted(d.glm1)
test$fitGLM1 <- predict(d.glm1, newdata=test, type="response")
# Print claim frequency actual vs predicted
sprintf("%s: %.2f%% / %.2f%%", "Claim Frequency GLM1, Test-Sample, Actual/Predicted", sum(test$ClaimNb)/sum(test$Exposure)*100, sum(test$fitGLM1)/sum(test$Exposure)*100)
# Print Poisson Deviance
sprintf("%s, Learn/Test: %.2f%% / %.2f%%", "Poisson Deviance GLM1", PDW(learn$fitGLM1,learn$ClaimNb,learn$Exposure), PDW(test$fitGLM1,test$ClaimNb,test$Exposure))
# GLM1--假设是用我们的包做的
library(GLMplus)
f.glm1 <- ClaimNb ~ VehPowerGLM + VehAgeGLM + DrivAgeGLM + BonusMalusGLM + VehBrand + VehGas + DensityGLM + Region + Area
d.glm1 <- glm(f.glm1, data = learn, offset = log(Exposure), family = poisson())
summary(d.glm1)
learn$fitGLM1 <- fitted(d.glm1)
test$fitGLM1 <- predict(d.glm1, newdata=test, type="response")
# Print claim frequency actual vs predicted
sprintf("%s: %.2f%% / %.2f%%", "Claim Frequency GLM1, Test-Sample, Actual/Predicted", sum(test$ClaimNb)/sum(test$Exposure)*100, sum(test$fitGLM1)/sum(test$Exposure)*100)
# Print Poisson Deviance
sprintf("%s, Learn/Test: %.2f%% / %.2f%%", "Poisson Deviance GLM1", PDW(learn$fitGLM1,learn$ClaimNb,learn$Exposure), PDW(test$fitGLM1,test$ClaimNb,test$Exposure))
# GLM1--假设是用我们的包做的
PDW <- function(pred, obs, ex = rep(1, length(obs))) {
200 * sum( ex * ( pred - obs  + log((obs / pred) ^ (obs )))) / sum(ex)
}
f.glm1 <- ClaimNb ~ VehPowerGLM + VehAgeGLM + DrivAgeGLM + BonusMalusGLM + VehBrand + VehGas + DensityGLM + Region + Area
d.glm1 <- glm(f.glm1, data = learn, offset = log(Exposure), family = poisson())
summary(d.glm1)
learn$fitGLM1 <- fitted(d.glm1)
test$fitGLM1 <- predict(d.glm1, newdata=test, type="response")
# Print claim frequency actual vs predicted
sprintf("%s: %.2f%% / %.2f%%", "Claim Frequency GLM1, Test-Sample, Actual/Predicted", sum(test$ClaimNb)/sum(test$Exposure)*100, sum(test$fitGLM1)/sum(test$Exposure)*100)
# Print Poisson Deviance
sprintf("%s, Learn/Test: %.2f%% / %.2f%%", "Poisson Deviance GLM1", PDW(learn$fitGLM1,learn$ClaimNb,learn$Exposure), PDW(test$fitGLM1,test$ClaimNb,test$Exposure))
install.packages("/Users/lusihan/Desktop/GLMplus_0.0.0.9000.tar.gz", repos = NULL, type="source")
# GLM1--假设是用我们的包做的
library(GLMplus)
f.glm1 <- ClaimNb ~ VehPowerGLM + VehAgeGLM + DrivAgeGLM + BonusMalusGLM + VehBrand + VehGas + DensityGLM + Region + Area
d.glm1 <- glm(f.glm1, data = learn, offset = log(Exposure), family = poisson())
summary(d.glm1)
learn$fitGLM1 <- fitted(d.glm1)
test$fitGLM1 <- predict(d.glm1, newdata=test, type="response")
# Print claim frequency actual vs predicted
sprintf("%s: %.2f%% / %.2f%%", "Claim Frequency GLM1, Test-Sample, Actual/Predicted", sum(test$ClaimNb)/sum(test$Exposure)*100, sum(test$fitGLM1)/sum(test$Exposure)*100)
# Print Poisson Deviance
sprintf("%s, Learn/Test: %.2f%% / %.2f%%", "Poisson Deviance GLM1", PDW(learn$fitGLM1,learn$ClaimNb,learn$Exposure), PDW(test$fitGLM1,test$ClaimNb,test$Exposure))
num_features <- c('BonusMalus','DrivAge','VehPower','VehAge','Density')
cat_features <- c('Area','VehBrand','VehGas','Region')
features <- c(num_features, cat_features)
# Feature pre-processing for XGBoost and lightGBM
df_feat <- dat[,c(features)]
df_feat$Area <- as.integer(df_feat$Area)
print(paste("Features before one-hot-encoding:",dim(df_feat)[2]))
# one-hot encoding for Region and VehBrand
df_feat <- as.data.frame(model.matrix( ~ 0 +. ,data = df_feat))
